patch-package
--- a/node_modules/cucumber-mink/src/mink.js
+++ b/node_modules/cucumber-mink/src/mink.js
@@ -16,6 +16,7 @@ const DEFAULT_CONFIG = {
   },
   headless: process.env.RUN_HEADLESS !== '0',
   devtools: process.env.RUN_DEVTOOLS === '1',
+  noSandbox: process.env.NO_SANDBOX === '1',
 };
 
 function gherkin(cucumber) {
@@ -38,6 +39,7 @@ Mink.prototype.hook = function (cucumber) {
 };
 Mink.prototype.setup = async function () {
   this.browser = await puppeteer.launch({
+    args: (this.config.noSandbox) ? ['--no-sandbox'] : [],
     headless: this.config.headless && !this.config.devtools,
     devtools: this.config.devtools,
   });
@@ -75,16 +77,22 @@ Mink.prototype.count = function (selector) {
   });
 };
 
-Mink.prototype.elementsWithText = function (selector, text) {
+Mink.prototype.elementsWithText = function (selector, text, exact = true) {
   const self = this;
   return self.page.$$(selector).then(items => Promise.filter(items, (handle) => {
     /* istanbul ignore next */
     return self.page.evaluate(obj => obj.innerText, handle)
-      .then(res => res.toUpperCase() === text.toUpperCase());
+      .then(res => {
+        if (exact) {
+            return res.toUpperCase() === text.toUpperCase()
+        } else {
+            return res.toUpperCase().indexOf(text.toUpperCase()) >= 0
+        }
+      });
   }));
 };
 
-Mink.prototype.elementsWithValue = function (selector, text) {
+Mink.prototype.elementsWithValue = function (selector, text, exact = true) {
   const self = this;
   return self.page.$$(selector).then(items => Promise.filter(items, (handle) => {
     /* istanbul ignore next */
@@ -113,7 +121,8 @@ Mink.prototype.link = function (mixed) {
     () => Promise
       .try(() => this.page.$$(mixed))
       .catch((err) => { debug(err); return []; }),
-    () => this.elementsWithText('a', mixed),
+    () => this.elementsWithText('a', mixed, true),
+    () => this.elementsWithText('a', mixed, false),
   ];
   return detectSeries(arr, fn => fn(), WebElements => !!WebElements.length)
     .then(({ result }) => {
